{"version":3,"file":"main.js","mappings":"mBAAA,MAAMA,EAAuBC,IAIzB,MAEMC,EAAOC,KACPC,EAAa,GAAPF,EAyBZ,IAAIG,EAAWC,aAvBQ,KACnB,MAAMC,EAAQ,IAAIC,KACZC,EAAc,IAAID,KAAKP,GACvBS,EAAgBC,SAASC,eAAe,kBACxCC,EAAYJ,EAAcF,EAChC,GAAIM,IAAcT,EAGd,OAFAM,EAAcI,UAAY,0BAC1BC,cAAcV,GAEX,GAAIQ,GAAa,EAGpB,OAFAH,EAAcI,UAAY,yBAC1BC,cAAcV,GAIlB,MAAMW,EAAOC,KAAKC,MAAML,EAAYT,GAC9Be,EAAQF,KAAKC,MAAOL,EAAYT,EAAOF,GACvCkB,EAAUH,KAAKC,MAAOL,EAAYX,EArB7BmB,KAsBLC,EAAUL,KAAKC,MAAOL,EAtBjBQ,IADA,KAyBXX,EAAcI,UAAa,GAAEE,WAAcG,UAAcC,WAAiBE,UAA1E,GAGuC,IAA3C,EC5BeX,SAASC,eAAe,OAChCW,iBAAiB,SAAUC,IAClCA,EAAEC,iBAEF,IAAIC,EAAgBf,SAASC,eAAe,eAAee,MACvDC,EAAiBjB,SAASC,eAAe,eAAee,MAE5DE,QAAQC,IAAIJ,GACZG,QAAQC,IAAIF,GCZGG,WACfF,QAAQC,IAAIE,SACiBC,MACxB,sCAAqCD,KAErCE,MAAKC,GAAOA,EAAIC,SAChBF,MAAKG,IACFR,QAAQC,IAAIO,EAAKC,SAAS,IAC1BT,QAAQC,IAAIO,EAAKC,SAAS,GAAGC,aAC7BV,QAAQC,IAAK,eAAcO,EAAKC,SAAS,GAAGE,OAC5CX,QAAQC,IAAK,cAAaO,EAAKC,SAAS,GAAGG,MAA3C,GARR,EDWAC,CAAWhB,GACX1B,EAAoB4B,EAApB,IEVJ5B,G","sources":["webpack://capstonetravel/./src/client/js/countDownCalculator.js","webpack://capstonetravel/./src/client/js/formSubmit.js","webpack://capstonetravel/./src/client/js/getGeoInfo.js","webpack://capstonetravel/./src/index.js"],"sourcesContent":["const countDownCalculator = (clientDate) => {\n\n    // console.log(arrivalDate)\n\n    const second = 1000\n    const minute = second * 60\n    const hour = minute * 60\n    const day = hour * 24\n\n    const countDownTimer = () => { \n        const today = new Date()\n        const arrivalDate = new Date(clientDate)\n        const remainingTime = document.getElementById('remaining-time')\n        const timeRange = arrivalDate - today\n        if (timeRange <= -day) {\n            remainingTime.innerHTML = 'How was your trip?'\n            clearInterval(timerRef)\n            return\n        } else if (timeRange <= 0) {\n            remainingTime.innerHTML = 'Adventure awaits!'\n            clearInterval(timerRef)\n            return\n        } \n\n        const days = Math.floor(timeRange / day)\n        const hours = Math.floor((timeRange % day) / hour)\n        const minutes = Math.floor((timeRange % hour) / minute)\n        const seconds = Math.floor((timeRange % minute) / second)\n\n        remainingTime.innerHTML = `${days} days  ${hours} hrs  ${minutes} mins  ${seconds} secs  `\n\n    }\n    let timerRef = setInterval(countDownTimer, 1000)\n}\n\n\nexport { countDownCalculator }","import { countDownCalculator } from \"./countDownCalculator\"\nimport { getGeoInfo } from \"./getGeoInfo\"\n\nconst formSubmit = () => {\n    const button = document.getElementById('btn')\n    button.addEventListener('click', (e) => {\n    e.preventDefault()\n\n    let locationValue = document.getElementById('destination').value\n    let departureValue = document.getElementById('travel-date').value\n\n    console.log(locationValue)\n    console.log(departureValue)\n    getGeoInfo(locationValue)\n    countDownCalculator(departureValue)\n    })\n}\n\nexport { formSubmit }\n","const getGeoInfo = async (userLocale) => {\n    console.log(userLocale)\n    const longLatCountry = await fetch(\n        `http://localhost:5200/weatherGrab/:${userLocale}`\n        )\n        .then(res => res.json())\n        .then(data => {\n            console.log(data.geonames[0])\n            console.log(data.geonames[0].countryName)\n            console.log(`lattittude: ${data.geonames[0].lat}`)\n            console.log(`longitude: ${data.geonames[0].lng}`)\n        })\n}\n\nexport { getGeoInfo }","import { formSubmit } from './client/js/formSubmit'\nimport { countDownCalculator } from './client/js/countDownCalculator'\n\nformSubmit()\ncountDownCalculator()\n\nexport { formSubmit }\n// export { countDown }\n"],"names":["countDownCalculator","clientDate","hour","minute","day","timerRef","setInterval","today","Date","arrivalDate","remainingTime","document","getElementById","timeRange","innerHTML","clearInterval","days","Math","floor","hours","minutes","second","seconds","addEventListener","e","preventDefault","locationValue","value","departureValue","console","log","async","userLocale","fetch","then","res","json","data","geonames","countryName","lat","lng","getGeoInfo"],"sourceRoot":""}